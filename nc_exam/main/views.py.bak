# -*- coding: utf-8 -*-
# Create your views here.

import hashlib, os, requests, logging, calendar, datetime
import simplejson as json
from lxml import etree
from django.utils.encoding import smart_str
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
from configparser import ConfigParser
#from WXBizDataCrypt import WXBizDataCrypt
from main.models import Department, Members, WorkType, Questions, TestPapers, TestQuestions, Papers, PaperTypes
from django.db.models import Q, Count, Avg
from django.db import connection

WEIXIN_TOKEN = 'carzpurzkey_nc_exam_weixin_token'

config = ConfigParser()
config.read(os.path.dirname(__file__) + '/config.ini')

@csrf_exempt
def weixin_main(request):
    """
    微信接入验证是GET方法，微信正常的收发消息是POST方法
    """
    if request.method == 'GET':
        signature = request.GET.get('signature', None)
        timestamp = request.GET.get('timestamp', None)
        nonce = request.GET.get('nonce', None)
        echostr = request.GET.get('echostr', None)

        token = WEIXIN_TOKEN

        tmp_list = [token, timestamp, nonce]
        tmp_list.sort()
        tmp_str = '%s%s%s' % tuple(tmp_list)
        tmp_str = hashlib.sha1(tmp_str.encode('utf8')).hexdigest()
        if tmp_str == signature:
            return HttpResponse(echostr)
        else:
            return HttpResponse('weixin index')
@csrf_exempt
def login(request):
    appid = config.get('WeiXin', 'appid')
    appsecret = config.get('WeiXin', 'appsecret')
    code = request.GET['code']
    jscode2session_url = config.get('WeiXin', 'jscode2session_url')

    if code:
        req_code_params = {'appid': appid, 'secret': appsecret, 'js_code': code, 'grant_type': 'authorization_code'}
        resp = requests.get(jscode2session_url, params=req_code_params)
        resp_obj = resp.json()

        if 'errcode' in resp_obj:
            return HttpResponse('{ \"errmsg\": \"%s\" }' % resp_obj['errmsg'], content_type='text/json')
        if 'openid' not in resp_obj:
            return HttpResponse('{ \"errmsg\": \"服务器返回异常。\" }', content_type='text/json')

        request.session['open_id'] = resp_obj['openid']

        #if not Members.objects.filter(weixin_open_id=resp_obj['openid']).exists():
        #   return HttpResponse('{ \"errmsg": \"nosuchmember\" }', content_type='text/json')

        if Members.objects.filter(Q(weixin_open_id=resp_obj['openid']), Q(deleted=True)).exists():
            return HttpResponse('{ \"errmsg": \"deletedmember\" }', content_type='text/json')

        if Members.objects.filter(Q(weixin_open_id=resp_obj['openid']), Q(verified=False)).exists():
            return HttpResponse('{ \"errmsg\": \"notverified\" }', content_type='text/json')

        mem = Members.objects.get(weixin_open_id=resp_obj['openid'])

        request.session.save()
        request.session['wx_session_key'] = resp_obj['session_key']
        return HttpResponse('{ \"my_session_key\": \"%s\", \"mem_name\": \"%s\", \"mem_dep\": \"%s\", \"mem_wt\": \"%s\", \"mem_pos\": \"%s\" }' % (request.session.session_key, mem.name, mem.dep_id.dep_name, mem.work_type_id.type_name, mem.position_id.name), content_type='text/json')
    else:
        return HttpResponse('{ \"errmsg\": \"服务嚣未返回code。\" }', content_type='text/json')

@csrf_exempt
def ifNewUserLogin(request):
    woi = request.session.get('open_id', None)
    if not woi:
        return HttpResponse('{ \"errmsg\": \"openidlost\" }', content_type='text/json')

    try:
        if not Members.objects.filter(weixin_open_id=woi).exists():
            return HttpResponse('{ \"errmsg\": \"newuser\" }', content_type='text/json')
        else:
            return HttpResponse('{ \"errmsg\": \"OK\" }', content_type='text/json')
    except Exception as e:
        return HttpResponse('{ \"errmsg\": \"%s\" }' % str(e), content_type='text/json')

@csrf_exempt
def getWorkTypeList(request):
    ret_list = list()

    try:
        for wt in WorkType.objects.all():
            ret_list.append({ 'id': wt.work_type_id, 'name': wt.type_name })

        return HttpResponse(json.dumps({ 'work_types': ret_list }), content_type='text/json')
    except Exception as e:
        return HttpResponse('{ \"errmsg\": \"无法获取工种列表：%s\" }' % str(e), content_type='text/json')

@csrf_exempt
def getWorkShopList(request):
    ret_list = list()

    try:
        for dep in Department.objects.all().order_by('level'):
            ret_list.append({ 'id': dep.dep_id, 'name': dep.dep_name })

        return HttpResponse(json.dumps({ 'workshops': ret_list }), content_type='text/json')
    except Exception as e:
        return HttpResponse('{ \"errmsg\": \"无法获取车间列表：%s\" }' % str(e), content_type='text/json')

@csrf_exempt
def getMyPaperTypes(request):
    if_exam = request.POST.get('if_exam', None)
    if not if_exam:
        return HttpResponse('{ \"errmsg\": \"请求异常。\" }', content_type='text/json')

    woi = request.session.get('open_id', None)
    if not woi:
        return HttpResponse('{ \"errmsg\": \"notloggedin\" }', content_type='text/json')

    try:
        with connection.cursor() as cursor:
            cursor.callproc('get_paper_type_by_user', (request.session['open_id'], False if if_exam == '0' else True))
            ret = dictfetchall(cursor)

        if not ret:
            ret = list()
            pts = PaperTypes.objects.all()
            for pt in pts:
                m = Members.objects.get(weixin_open_id=woi)
                if not m:
                    return HttpResponse('{ \"errmsg\": \"没有此用户。\" }', content_type='text/json')

                paper_count = Papers.objects.filter(work_type_id=m.work_type_id, type_id=pt).count()
                ret.append({ 'type_name': pt.name, 'max_score': 0, 'paper_count': paper_count, 'weixin_open_id': m.weixin_open_id, 'type_id': pt.type_id })

        return HttpResponse(json.dumps(ret))
    except Exception as e:
        return HttpResopnse('{ \"errmsg\": \"%s\" }' % str(e), content_type='text/json')

@csrf_exempt
def getTestPapersByType(request):
    woi = request.session.get('open_id', None)
    if not woi:
        return HttpResponse('{ \"errmsg\": \"nologgedin\" }', content_type='text/json')

    type_id = request.POST.get('type_id', None)

    if not type_id:
        return HttpResponse('{ \"errmsg\": \"请求异常。\" }')

    try:
        m = Members.objects.get(weixin_open_id=woi)
        if not m:
            return HttpResponse('{ \"errmsg\": \"无此用户。\" }', content_type='text/json')

        wti = m.work_type_id
        with connection.cursor() as cursor:
            cursor.callproc('get_test_papers_by_type', (type_id, wti.work_type_id, woi))
            ret = dictfetchall(cursor)

        if not ret:
            pt = PaperTypes.objects.get(type_id=type_id)
            if not pt:
                return HttpResponse('{ \"errmsg\": \"无此类试卷。\" }', content_type='text/json')
            papers = Papers.objects.filter(work_type_id=wti, type_id=pt)

            ret = list()

            for p in papers:
                ret.append({ 'max_score': 0, 'type_id': p.type_id.type_id, 'passed_time': 0, 'paper_id': p.paper_id, 'paper_name': p.paper_name, 'set_date': p.set_date.strftime('%Y年%m月%d日'), 'test_time': '无', 'passing_score': p.passing_score, 'test_count': 0, 'test_time': p.test_time })

        return HttpResponse(json.dumps(ret))
    except Exception as e:
        return HttpResponse('{ \"errmsg\": \"%s\" }' % str(e), content_type='text/json')

@csrf_exempt
def getReadyInfo(request):
    woi = request.session.get('open_id', None)
    if not woi:
        return HttpResponse('{ \"errmsg\": \"登录信息已过期，请重新登录。\" }', content_type='text/json')

    try:
        m = Members.objects.get(weixin_open_id=woi)
        if not m:
            return HttpResponse('{ \"errmsg\": \"用户信息丢失。\" }', content_type='text/json')

        return HttpResponse('{ \"mem_name\": \"%s\", \"workshop\": \"%s\", \"work_type\": \"%s\" }' % (m.name, m.dep_id.dep_name, m.work_type_id.type_name), content_type='text/json')
    except Exception as e:
        return HttpResponse('{ \"errmsg\": \"%s\" }' % str(e), content_type='text/json')

@csrf_exempt
def getExamPapersByType(request):
    woi = request.session.get('open_id', None)
    if not woi:
        return HttpResponse('{ \"errmsg\": \"nologgedin\" }', content_type='text/json')

    type_id = request.POST.get('type_id', None)

    if not type_id:
        return HttpResponse('{ \"errmsg\": \"请求异常。\" }')

    try:
        m = Members.objects.get(weixin_open_id=woi)
        if not m:
            return HttpResponse('{ \"errmsg\": \"无此用户。\" }', content_type='text/json')

        wti = m.work_type_id
        with connection.cursor() as cursor:
            cursor.callproc('get_exam_papers_by_type', (type_id, wti.work_type_id, woi))
            ret = dictfetchall(cursor)

        if not ret:
            pt = PaperTypes.objects.get(type_id=type_id)
            if not pt:
                return HttpResponse('{ \"errmsg\": \"无此类试卷。\" }', content_type='text/json')
            papers = Papers.objects.filter(work_type_id=wti, type_id=pt)

            ret = list()

            for p in papers:
                ret.append({ 'score': 0, 'type_id': p.type_id.type_id, 'paper_id': p.paper_id, 'paper_name': p.paper_name, 'set_date': p.set_date.strftime('%Y年%m月%d日'), 'handin_date': '尚未答题', 'passing_score': p.passing_score, 'date_time': None, 'test_time': 1800000 })

        return HttpResponse(json.dumps(ret))
    except Exception as e:
        return HttpResponse('{ \"errmsg\": \"%s\" }' % str(e), content_type='text/json')

@csrf_exempt
def getTestsByPaperID(request):
    woi = request.session.get('open_id', None)
    if not woi:
        return HttpResponse('{ \"errmsg\": \"nologgedin\" }', content_type='text/json')

    paper_id = request.POST.get('paper_id', None)
    if not paper_id:
        return HttpResponse('{ \"errmsg\": \"请求异常。\" }')

    try:
        with connection.cursor() as cursor:
            cursor.callproc('get_tests_by_paperid', (paper_id, request.session['open_id']))
            ret = dictfetchall(cursor)
        return HttpResponse(json.dumps(ret))
    except Exception as e:
        return HttpResponse('{ \"errmsg\": \"%s\" }' % str(e), content_type='text/json')

@csrf_exempt
def getTestDetail(request):
    test_paper_id = request.POST.get('test_paper_id', None)
    if not test_paper_id:
        return HttpResponse('{ \"errmsg\": \"请求异常。\"}')

    try:
        with connection.cursor() as cursor:
            cursor.callproc('get_test_questions', (test_paper_id,))
            ret = dictfetchall(cursor)
        return HttpResponse(json.dumps(ret))
    except Exception as e:
        return HttpResponse('{ \"errmsg\": \"%s\" }' % str(e))

@csrf_exempt
def getRandomTest(request):
    paper_id = request.POST.get('paper_id', None)
    if not paper_id:
        return HttpResponse('{ \"errmsg\": \"请求异常。\" }')

    try:
        with connection.cursor() as cursor:
            cursor.callproc('get_random_test', (paper_id,))
            ret = dictfetchall(cursor)
        return HttpResponse(json.dumps(ret))
    except Exception as e:
        return HttpResponse('{ \"errmsg\": \"%s\" }' % str(e))

@csrf_exempt
def getIndexInfo(request):
    woi = request.session.get('open_id', None)
    if not woi:
        return HttpResponse('{ \"errmsg\": \"notloggedin\" }')

    try:
        cur_year = datetime.date.today().year
        cur_month = datetime.date.today().month
        monthRange = calendar.monthrange(cur_year, cur_month)[1]
        firstDay = datetime.datetime(cur_year, cur_month, 1, 0, 0, 0)
        lastDay = datetime.datetime(cur_year, cur_month, monthRange, 23, 59, 59)

        tests_count = TestPapers.objects.filter(weixin_open_id=woi, date_time__gte=firstDay, date_time__lte=lastDay).count()
        #debugLog(str(TestPapers.objects.filter(weixin_open_id=woi, date_time__gte=firstDay, date_time__lte=lastDay).annotate(tests_count=Count('test_paper_id')).query))

        avg_score = TestPapers.objects.filter(weixin_open_id=woi, date_time__gte=firstDay, date_time__lte=lastDay)
        if not avg_score or not avg_score.exists():
            avg_score = 0
        else:
            avg_score = avg_score.aggregate(avg_score=Avg('score'))['avg_score']

        mem_obj = Members.objects.filter(weixin_open_id=woi).first()
        mem_wti = mem_obj.work_type_id.work_type_id
        mem_name = mem_obj.name
        mem_pos_name = mem_obj.position_id.name
        mem_dep_name = mem_obj.dep_id.dep_name

        mem_wtn = WorkType.objects.filter(work_type_id=mem_wti).first().type_name

        return HttpResponse('{ \"tests_count\": \"%s\", \"avg_score\": \"%s\", \"mem_name\": \"%s\", \"mem_wtn\": \"%s\", \"mem_pos\": \"%s\", \"mem_dep\": \"%s\" }' % (tests_count, avg_score, mem_name, mem_wtn, mem_pos_name, mem_dep_name), content_type='text/json');
    except Exception as e:
        return HttpResponse('{ \"errmsg\": \"%s\" }' % str(e), content_type='text/json')

@csrf_exempt
def registerNewUser(request):
    #name = request.POST.get('name', None)
    #worktype = request.POST.get('worktype', None)
    #workshop = request.POST.get('workshop', None)
    idcard = request.POST.get('idcard', None)
    phonenumber = request.POST.get('phonenumber', None)
    woi = request.session.get('open_id', None)

    if not woi:
        return HttpResponse('{ \"errmsg\": \"登录信息丢失。\" }', content_type='text/json')

    #if not name or not worktype or not workshop or not idcard:
    if not idcard:
        return HttpResponse('{ \"errmsg\": \"请至少填写身份证号码。\" }', content_type='text/json')

    try:
        #nu_wt = WorkType.objects.get(work_type_id=int(worktype))
        #if not nu_wt:
        #    return HttpResponse('{ \"errmsg\": \"无此工种。\" }', content_type='text/json')

        #nu_ws = Department.objects.get(dep_id=int(workshop))
        #if not nu_ws:
        #    return HttpResponse('{ \"errmsg\": \"无此车间。\" }', content_type='text/json')

        #new_user = Members()
        #new_user.name = name
        #new_user.work_type_id = nu_wt
        #new_user.idcard = idcard
        #new_user.dep_id = nu_ws
        #new_user.phone_number = phonenumber
        #new_user.verified = False
        #new_user.deleted = False
        #new_user.weixin_open_id = woi
        #new_user.save()
        if not Members.objects.filter(idcard=idcard).exists():
            return HttpResponse('{ \"errmsg\": \"您还没有在系统中登记，请联系教育科管理员。\" }', content_type='text/json')

        mem = Members.objects.get(idcard=idcard)
        if mem.weixin_open_id:
            if mem.weixin_open_id != woi:
                return HttpResponse('{ \"errmsg\": \"您的身份证已绑定了其他微信号，请联系教育科管理员。\" }', content_type='text/json')
            else:
                return HttpResponse('{ \"errmsg\": \"您的身份证已和您的微信号绑定，请不要重复绑定。\" }', content_type='text/json')

        mem.weixin_open_id = woi
        if phonenumber:
            mem.phone_number = phonenumber
        mem.verified = True
        mem.deleted = False
        mem.save()

        return HttpResponse('{ \"errmsg\": \"OK\" }', content_type='text/json')
    except Exception as e:
        return HttpResponse('{ \"errmsg\": \"%s\" }' % str(e), content_type='text/json')

@csrf_exempt
def handin(request):
    paper_id = request.POST.get('paper_id', None)
    if_exam = request.POST.get('if_exam', None)
    paper_detail = request.POST.get('paper_detail', None)
    if not paper_id or not if_exam or not paper_detail:
        return HttpResponse('{ \"errmsg\": \"请求异常。\" }', content_type='text/json')

    woi = request.session.get('open_id', None)
    if not woi:
        return HttpResponse('{ \"errmsg\": \"登录信息丢失。\" }', content_type='text/json')

    me = Members.objects.get(weixin_open_id=woi, deleted=0, verified=1)
    if not me:
        return HttpResponse('{ \"errmsg\": \"该用户不存在。\" }', content_type='text/json')

    try:
        pid_obj = Papers.objects.get(paper_id=paper_id)
        if not pid_obj:
            return HttpResponse('{ \"errmsg\": \"试卷不存在。\" }', content_type='text/json')

        if if_exam == '1':
            TestPapers.objects.filter(paper_id=pid_obj, if_exam=True, weixin_open_id=me).delete()

        new_paper = TestPapers()
        new_paper.paper_id = pid_obj
        new_paper.if_exam = if_exam == '1'

        new_paper.weixin_open_id = me
        new_paper.date_time = datetime.datetime.now()
        new_paper.score = 0.0
        new_paper.save()

        pd_obj = json.loads(paper_detail)
        total_score = 0.0
        q_count = 0
        for (q_id, q_ans) in pd_obj.items():
            tq = TestQuestions()
            ques = Questions.objects.get(question_id=q_id)
            tq.question_id = ques
            tq.test_paper_id = new_paper
            tq.answers = q_ans
            q_count += 1
            tq.sn = q_count

            if q_ans == ques.question_right_answers:
                total_score += 1.0
                tq.score = 1.0
            else:
                tq.score = 0.0
            tq.save()

        total_score_100 = (total_score / q_count) * 100
        new_paper.score = total_score_100
        new_paper.save()

        return HttpResponse('{ \"errmsg\": \"OK\", \"score\": \"%f\", \"passing_score\": \"%f\", \"test_paper_id\": \"%s\" }' % (total_score_100, pid_obj.passing_score, new_paper.test_paper_id), content_type='text/json')
    except Exception as e:
        return HttpResponse('{ \"errmsg\": \"%s\" }' % str(e), content_type='text/json')

def dictfetchall(cursor):
    columns = [col[0] for col in cursor.description]
    return [
        dict(zip(columns, row)) for row in cursor.fetchall()
    ]

def debugLog(mes):
    log = logging.getLogger('nc_exam_file_debug_logger')
    log.setLevel(logging.DEBUG)
    formatter = logging.Formatter('[%(levelname)s][第%(lineno)s行] - %(message)s');
    fh = logging.FileHandler('/home/carzpurzkey/projects/nc_exam/nc_exam/main/log.log', mode='a', encoding='utf-8')
    fh.setFormatter(formatter)
    log.addHandler(fh)
    log.debug(mes)
